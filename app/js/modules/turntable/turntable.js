// Generated by CoffeeScript 1.6.3
define(["require", "jquery", "radio", "modules/turntable/turntablemodel", "modules/turntable/turntableview"], function(require, $, radio, TurntableModel, TurntableView) {
  var Turntable;
  return Turntable = (function() {
    function Turntable(_turntableClass, _eventPrefix) {
      var numRandomPrefix, _audioContext;
      this._turntableClass = _turntableClass != null ? _turntableClass : ".turntable";
      this._eventPrefix = _eventPrefix != null ? _eventPrefix : "TURNTABLE";
      _audioContext = window.AudioContext || window.webkitAudioContext;
      this._audioCore = new _audioContext();
      numRandomPrefix = (function(numLength) {
        return Math.random() * (numLength - 0 + 1) + 0;
      })("99999");
      this._eventPrefix = "" + this._eventPrefix + "." + numRandomPrefix;
      radio("" + this._eventPrefix + ".START_CHANGE").subscribe([this.onStartChange, this]);
      radio("" + this._eventPrefix + ".POWER_CHANGE").subscribe([this.onPowerChange, this]);
      radio("" + this._eventPrefix + ".PITCH_CHANGE").subscribe([this.onPitchChange, this]);
      radio("" + this._eventPrefix + ".SPEED_CHANGE").subscribe([this.onSpeedChange, this]);
      this._modelTurntable = new TurntableModel(this);
      this._viewTurntable = new TurntableView(this);
    }

    Turntable.prototype.onPowerChange = function(boolPowered) {
      return this.setPower(boolPowered);
    };

    Turntable.prototype.setPower = function(boolPowered) {
      this._modelTurntable.setPower(boolPowered);
      return this._viewTurntable.setPower(this._modelTurntable.getPower());
    };

    Turntable.prototype.onStartChange = function(boolStarted) {
      return this.setStart(boolStarted);
    };

    Turntable.prototype.setStart = function(boolStarted) {
      this._modelTurntable.setStart(boolStarted);
      return this._viewTurntable.setStart(this._modelTurntable.getStart());
    };

    Turntable.prototype.onPitchChange = function(numPitch) {
      return this.setPitch(numPitch);
    };

    Turntable.prototype.setPitch = function(numPitch) {
      this._modelTurntable.setPitch(numPitch);
      return this._viewTurntable.setPitch(this._modelTurntable.getPitch());
    };

    Turntable.prototype.onSpeedChange = function(numSpeed) {
      console.log("Setting speed");
      return this._viewTurntable.setSpeed(numSpeed);
    };

    Turntable.prototype.setStarted = function(boolStarted) {
      var objSettings;
      objSettings = this.getSettings();
      if (objSettings.powered) {
        return objSettings.started = boolStarted;
      }
    };

    Turntable.prototype.setLowPass = function() {};

    return Turntable;

  })();
});
