// Generated by CoffeeScript 1.7.1
(function() {
  define(['modules/AudioStream'], function(AudioStream) {

    /**
    	 * AudioMixer creates channels that can be mixed
     */
    var AudioMixer;
    return AudioMixer = (function() {
      function AudioMixer() {
        var _audioContext;
        _audioContext = window.AudioContext || window.webkitAudioContext;
        this._audioCore = this._audioCore || new _audioContext();

        /**
        			 * The available AudioStream channels
        			 * @type {Object}
         */
        this.objAudioChannels = {
          one: false,
          two: false
        };
        this.objCrossfader = {
          from: 'one',
          to: 'two',
          amount: .5
        };
      }

      AudioMixer.prototype._batchChannels = function(strMethod, arrValues) {
        var audioStream, strKey, _ref, _results;
        _ref = this.objAudioChannels;
        _results = [];
        for (strKey in _ref) {
          audioStream = _ref[strKey];
          if (typeof audioStream === 'object') {
            _results.push(audioStream[strMethod].apply(this, arrValues));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };


      /**
      		 * Sets up an audio channel with a AudioStream
      		 * @param {String} strUrl
      		 * @param {String} strlChannel = 'one'
       */

      AudioMixer.prototype.setAudioChannel = function(strUrl, strChannel) {
        if (strChannel == null) {
          strChannel = 'one';
        }
        this.objAudioChannels[strChannel] = new AudioStream(this._audioCore, strUrl);
        return this.setCrossFade();
      };


      /**
      		 * returns the audio channel
      		 * @param  {String} strChannel = 'one'
      		 * @return {AudioStream}
       */

      AudioMixer.prototype.getAudioChannel = function(strChannel) {
        if (strChannel == null) {
          strChannel = 'one';
        }
        return this.objAudioChannels[strChannel];
      };

      AudioMixer.prototype.setStopAll = function() {
        return this._batchChannels('setStop');
      };

      AudioMixer.prototype.setCrossFadeSources = function(strFrom, strTo) {
        this.objCrossfader['from'] = strFrom;
        this.objCrossfader['to'] = strTo;
        return setCrossFade();
      };

      AudioMixer.prototype.setCrossFadeAmount = function(numCrossFadeAmount) {
        this.numCrossFadeAmount = numCrossFadeAmount;
        return this.setCrossFade();
      };

      AudioMixer.prototype.setCrossFade = function() {
        var audioFromChannel, audioToChannel, numFromAmount, numToAmount;
        numFromAmount = 1 - this.numCrossFadeAmount;
        numToAmount = this.numCrossFadeAmount;
        audioFromChannel = this.objAudioChannels[this.objCrossfader['from']];
        audioToChannel = this.objAudioChannels[this.objCrossfader['to']];
        if (typeof audioFromChannel === 'object') {
          audioFromChannel.setVolume(numFromAmount);
        }
        if (typeof audioToChannel === 'object') {
          return audioToChannel.setVolume(numToAmount);
        }
      };

      return AudioMixer;

    })();
  });

}).call(this);
