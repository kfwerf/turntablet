// Generated by CoffeeScript 1.7.1
(function() {
  define([], function() {
    var AudioFilters;
    return AudioFilters = (function() {
      function AudioFilters(_audioCore) {
        this._audioCore = _audioCore;
        this.numPitch = 0;
        this.numVolume = 1;
        this.numLowFilter = 0;
        this.numMidFilter = 0;
        this.numHighFilter = 0;
      }

      AudioFilters.prototype.setInput = function(_audioBuffer) {
        this._audioBuffer = _audioBuffer;
        this._audioSrc = this._audioCore.createBufferSource();
        this._audioSrc.buffer = this._audioBuffer;
        if (this._audioSrc) {
          this._audioSrc.playbackRate.value = (100 + Number(this.numPitch)) / 100;
        }
        this._audioVolume = this._audioCore.createGain();
        this._audioVolume.gain.value = this.numVolume;
        this._audioLowFilter = this._audioCore.createBiquadFilter();
        this._audioLowFilter.type = 'lowshelf';
        this._audioLowFilter.frequency.value = 500;
        this._audioLowFilter.gain.value = this.numLowFilter;
        this._audioMidFilter = this._audioCore.createBiquadFilter();
        this._audioMidFilter.type = 'peaking';
        this._audioMidFilter.frequency.value = 750;
        this._audioMidFilter.gain.value = this.numMidFilter;
        this._audioHighFilter = this._audioCore.createBiquadFilter();
        this._audioHighFilter.type = 'highshelf';
        this._audioHighFilter.frequency.value = 1000;
        this._audioHighFilter.gain.value = this.numHighFilter;
        this._audioSrc.connect(this._audioVolume);
        this._audioVolume.connect(this._audioLowFilter);
        this._audioLowFilter.connect(this._audioMidFilter);
        return this._audioMidFilter.connect(this._audioHighFilter);
      };

      AudioFilters.prototype.getInput = function() {
        return this._audioSrc;
      };

      AudioFilters.prototype.getOutput = function() {
        return this._audioHighFilter;
      };

      AudioFilters.prototype.setLowFilter = function(numLowFilter) {
        this.numLowFilter = numLowFilter;
        if (this._audioLowFilter) {
          return this._audioLowFilter.gain.value = this.numLowFilter;
        }
      };

      AudioFilters.prototype.setMidFilter = function(numMidFilter) {
        this.numMidFilter = numMidFilter;
        if (this._audioMidFilter) {
          return this._audioMidFilter.gain.value = this.numMidFilter;
        }
      };

      AudioFilters.prototype.setHighFilter = function(numHighFilter) {
        this.numHighFilter = numHighFilter;
        if (this._audioHighFilter) {
          return this._audioHighFilter.gain.value = this.numHighFilter;
        }
      };

      AudioFilters.prototype.setVolume = function(numVolume) {
        this.numVolume = numVolume;
        if (this._audioVolume) {
          return this._audioVolume.gain.value = this.numVolume;
        }
      };

      AudioFilters.prototype.setPitch = function(numPitch) {
        this.numPitch = numPitch;
        if (this._audioSrc) {
          return this._audioSrc.playbackRate.value = (100 + Number(this.numPitch)) / 100;
        }
      };

      return AudioFilters;

    })();
  });

}).call(this);
