// Generated by CoffeeScript 1.7.1
(function() {
  define(['modules/AudioLoader', 'modules/AudioFilters'], function(AudioLoader, AudioFilters) {

    /**
    	 * @module  AudioStream
    	 * @description Wrapper for easy loading of an audio file and attaching filters to it
     */
    var AudioStream;
    return AudioStream = (function() {
      function AudioStream(strFileName) {
        var _audioContext;
        this.strFileName = strFileName;
        _audioContext = window.AudioContext || window.webkitAudioContext;
        this._audioCore = new _audioContext();
        this._audioFilters = new AudioFilters(this._audioCore);
        this._boolLoading = false;
        this.boolPlaying = false;
        this.numPlayhead = 0;
        this._load();
      }

      AudioStream.prototype._reset = function() {
        if (this._audioBuffer) {
          this._audioFilters.setInput(this._audioBuffer);
          this._audioIn = this._audioFilters.getInput();
          this._audioOut = this._audioFilters.getOutput();
          return this._audioOut.connect(this._audioCore.destination);
        }
      };

      AudioStream.prototype._load = function() {
        this._boolLoading = true;
        return this._audioLoader = new AudioLoader(this.strFileName, this._audioCore).success((function(_this) {
          return function(_audioBuffer) {
            _this._audioBuffer = _audioBuffer;
            _this._reset();
            return _this._boolLoading = false;
          };
        })(this));
      };

      AudioStream.prototype.setLow = function(numValue) {
        if (numValue !== void 0) {
          return this._audioFilters.setLowFilter(numValue);
        }
      };

      AudioStream.prototype.setMid = function(numValue) {
        if (numValue !== void 0) {
          return this._audioFilters.setMidFilter(numValue);
        }
      };

      AudioStream.prototype.setHigh = function(numValue) {
        if (numValue !== void 0) {
          return this._audioFilters.setHighFilter(numValue);
        }
      };

      AudioStream.prototype.setVolume = function(numValue) {
        if (numValue !== void 0) {
          return this._audioFilters.setVolume(numValue);
        }
      };

      AudioStream.prototype.setPitch = function(numValue) {
        if (numValue !== void 0) {
          return this._audioFilters.setPitch(numValue);
        }
      };

      AudioStream.prototype.setPlay = function(numPlayhead) {
        if (!this._boolLoading && !this.boolPlaying) {
          if (numPlayhead !== void 0) {
            this.numPlayhead = numPlayhead;
          }
          this._audioIn.start(this.numPlayhead);
          return this.boolPlaying = true;
        }
      };

      AudioStream.prototype.setStop = function(numPlayhead) {
        if (!this._boolLoading && this.boolPlaying) {
          this.numPlayhead = this._audioOut.context.currentTime;
          this._audioIn.stop();
          this._reset();
          return this.boolPlaying = false;
        }
      };

      return AudioStream;

    })();
  });

}).call(this);
